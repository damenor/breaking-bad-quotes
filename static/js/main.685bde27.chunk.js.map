{"version":3,"sources":["logo.svg","components/Quote.js","utils/index.js","hooks/useApiQuotes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quote","data","className","phrase","author","fetchApiQuotes","callback","a","axios","res","quote","console","error","useApiQuotes","useState","setQuote","useEffect","App","src","logo","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,qKCW5BC,EATD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACE,yBAAKC,UAAU,SACb,4BAAKD,EAAKE,QACV,2BAAIF,EAAKG,U,yCCJFC,EAAc,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEAEd,sDAFc,SAGRC,IADN,uDAFc,OAGpBC,EAHoB,OAI1BH,EAAS,CACPH,OAAQM,EAAIR,KAAK,GAAGS,MACpBN,OAAQK,EAAIR,KAAK,GAAGG,SANI,gDAS1BO,QAAQC,MAAR,MAT0B,yDAAH,sDCcZC,EAbM,WAAO,IAAD,EAECC,qBAFD,mBAElBJ,EAFkB,KAEXK,EAFW,KASzB,OAJAC,qBAAU,WACRX,EAAeU,KACd,IAEI,CAACL,EAAOK,ICYFE,EAhBH,WAAO,IAAD,EAEUJ,IAFV,mBAETH,EAFS,KAEFK,EAFE,KAMhB,OAAIL,EAEF,yBAAKR,UAAU,aACb,yBAAKA,UAAU,OAAOgB,IAAKC,MAC3B,kBAAC,EAAD,CAAOlB,KAAMS,IACb,4BAAQU,QAPI,kBAAMf,EAAeU,KAOjC,cALc,MCFAM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.685bde27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.427a4adc.svg\";","import React from 'react'\r\n\r\nconst Quote = ({ data }) => {\r\n  return (\r\n    <div className=\"quote\">\r\n      <h1>{data.phrase}</h1> \r\n      <p>{data.author}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quote","import axios from 'axios'\r\n\r\nexport const fetchApiQuotes = async callback => {\r\n  try{\r\n    const url = 'https://breaking-bad-quotes.herokuapp.com/v1/quotes'\r\n    const res = await axios(url)\r\n    callback({\r\n      phrase: res.data[0].quote,\r\n      author: res.data[0].author\r\n    })\r\n  } catch(error) {\r\n    console.error(error)\r\n  }\r\n}","import { useEffect, useState } from 'react'\r\nimport { fetchApiQuotes } from '../utils'\r\n\r\nconst useApiQuotes = () => {\r\n\r\n  const [quote, setQuote] = useState()\r\n  \r\n  \r\n  useEffect(() => {\r\n    fetchApiQuotes(setQuote)\r\n  }, [])\r\n\r\n  return [quote, setQuote]\r\n\r\n}\r\n\r\nexport default useApiQuotes","import React from 'react'\n\nimport logo from './logo.svg'\n\nimport Quote from './components/Quote'\nimport useApiQuotes from './hooks/useApiQuotes'\nimport { fetchApiQuotes } from './utils'\n\nconst App = () => {\n  \n  const [quote, setQuote] = useApiQuotes()\n\n  const onClick = () => fetchApiQuotes(setQuote)\n  \n  if(!quote) return null\n  return (\n    <div className=\"container\">\n      <img className=\"logo\" src={logo} />\n      <Quote data={quote}></Quote>\n      <button onClick={onClick}>New quote</button>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}